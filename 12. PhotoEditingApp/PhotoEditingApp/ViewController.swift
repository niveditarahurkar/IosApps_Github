
import UIKit
import Photos
import CoreData
class ViewController: UIViewController {
    let cameraController = CameraController()
    @IBOutlet fileprivate var captureButton: UIButton!
    ///Displays a preview of the video output generated by the device's cameras.
    @IBOutlet weak var capturePreviewView: UIView!
    ///Allows the user to put the camera in photo mode.
    @IBOutlet fileprivate var photoModeButton: UIButton!
    @IBOutlet fileprivate var toggleCameraButton: UIButton!
    @IBOutlet fileprivate var toggleFlashButton: UIButton!
    
    @IBOutlet weak var useButton: UIButton!
    
    @IBOutlet weak var capturedImage: UIImageView!
    
    ///Allows the user to put the camera in video mode.
    @IBOutlet fileprivate var videoModeButton: UIButton!
    
    override var prefersStatusBarHidden: Bool { return true }
    
    
    
    @IBAction func onUse(_ sender: UIButton) {
        print("inside onUse")
        capturedImage.image = cameraController.getImage();
        //let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext
        let myVC = storyboard?.instantiateViewController(withIdentifier: "PhotoSelectViewController") as! PhotoSelectViewController
        myVC.filteredImageView = capturedImage
        myVC.theImagePassed = cameraController.getImage();
        //myVC.imageView = 
        //myVC.modifyOriginalScreen(value: true)
        //myVC.modifyFilterScreen(value: false)
        myVC.filteredImageView.contentMode = .scaleAspectFit
        myVC.myFlag = false
       // myVC.scrollView = UIScrollView!
        //navigationController?.pushViewController(myVC, animated: true)
        present(myVC, animated: true, completion: myVC.takePhotoFromCamera)
    }
    
}

extension ViewController {
    override func viewDidLoad() {
        print("in view did load")
        capturedImage.isHidden = true
        useButton.isHidden = true
        func configureCameraController() {
            cameraController.prepare {(error) in
                if let error = error {
                    print(error)
                }
                
                try? self.cameraController.displayPreview(on: self.capturePreviewView)
            }
        }
        
        func styleCaptureButton() {
            captureButton.layer.borderColor = UIColor.black.cgColor
            captureButton.layer.borderWidth = 2
            captureButton.layer.cornerRadius = min(captureButton.frame.width, captureButton.frame.height) / 2
        }
        
            styleCaptureButton()
            configureCameraController()

    }
    
}
    extension ViewController {

    @IBAction func toggleFlash(_ sender: UIButton) {
        if cameraController.flashMode == .on {
            cameraController.flashMode = .off
            toggleFlashButton.setImage(#imageLiteral(resourceName: "Flash Off Icon"), for: .normal)
        }
            
        else {
            cameraController.flashMode = .on
            toggleFlashButton.setImage(#imageLiteral(resourceName: "Flash On Icon"), for: .normal)
        }
    }
    
    @IBAction func switchCameras(_ sender: UIButton) {
        do {
            try cameraController.switchCameras()
        }
            
        catch {
            print(error)
        }
        
        switch cameraController.currentCameraPosition {
        case .some(.front):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "Front Camera Icon"), for: .normal)
            
        case .some(.rear):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "Rear Camera Icon"), for: .normal)
            
        case .none:
            return
        }
    }
    
        
    @IBAction func captureImage(_ sender: UIButton) {
        cameraController.captureImage {(image, error) in
            guard let myimage = image else {
                print(error ?? "Image capture error")
                return
            }
            try? PHPhotoLibrary.shared().performChangesAndWait {
                PHAssetChangeRequest.creationRequestForAsset(from: myimage)
                
            }
            self.capturedImage.image = image
        }
        
        print("updating image")
        /*
        if self.capturedImage.image == nil{
            print("image is nill")
            self.capturedImage.image = cameraController.getImage()

        }
        if self.capturedImage.image == nil{
            print("image is nill again")
        }
      */
        self.capturedImage.isHidden = false

        capturePreviewView.isHidden = true
        useButton.isHidden = false
 
        
    }
        
        
}
